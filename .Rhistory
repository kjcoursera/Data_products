testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
library(ggplot2)
qplot(trainIndex, training$CompressiveStrength)
qplot(training$CompressiveStrength)
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength)
qplot(training$CompressiveStrength,seq_along(training$CompressiveStrength))
qplot(seq_along(training$CompressiveStrength), training$CompressiveStrength)
qplot(seq_along(1:nrow(training)), training$CompressiveStrength)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(seq_along(1:nrow(training)), training$CompressiveStrength)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
g <- ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
print(g)
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
library(Hmisc)
names(training)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library(gridExtra)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library(dplyr)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement))
names(training)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Age))
qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer, breaks=20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433) data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.6, list=FALSE)
training <- segmentationOriginal[inTrain]
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class ~ ., method=rpart, data=training)
modFit <- train(Class ~ ., method="rpart", data=training)
install.packages('e1071', dependencies=TRUE)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
library(rattle)
install.packages('rattle', dependencies=TRUE)
install.packages('rattle')
library(rattle)
library(rattle)
install.packages('rattle', dependencies=TRUE)
install.packages("rattle", dependencies = TRUE)
library(rattle)
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modolive <- train(Area ~ ., method = "rpart", data = olive)
library(caret)
modolive <- train(Area ~ ., method = "rpart", data = olive)
predict(modolive,newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelSA<- train(chd~age+alcohol+obesity+tobacco+typea+ldl, data=trainSA,method="glm",family="binomial")
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modvowel <- randomForest(y ~ . data=vowel.train)
order(varImp(modvowel),ddecreasing = T)
modvowel <- randomForest(y ~ . ,data=vowel.train)
order(varImp(modvowel),ddecreasing = T)
modvowel <- randomForest(y ~ . ,data=vowel.train)
modvowel
varImp(modvowel)
order(varImp(modvowel))
order(varImp(modvowel),decreasing = T)
install.packages('kernlab')
library(kernlab)
data("spam")
head(spam)
plot(density(spam$your[spam$type=="nonspam"]),col="blue",main="",xlab="Frequency of 'your'")
lines(density(spam$your[spam$type="spam"]),col="red")
lines(density(spam$your[spam$type=="spam"]),col="red")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your > 0.5, "spam","nonspam")
table(prediction,spam$type/length(spam$type))
table(prediction,spam$type)/length(spam$type)
prediction
table(prediction,spam$type)/length(spam$type)
table(prediction,spam$type)
table(prediction)
table(spam$type)
table(prediction,spam$type)
length(prediction == "spam")
length(prediction == "nonspam")
length(prediction[prediction == "nonspam"])
2112+468
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
smallSpam
head(sample())
head(sample)
spamLabel <- (smallSpam$type="spam")*1 +1
spamLabel <- (smallSpam$type=="spam")*1 +1
spamLabel
sample()
sample.int()
head(sample.int())
head(sample.int
)
plot(smallSpam$capitalAve,col=spamLabel)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
spamLabel <- (smallSpam$type=="spam")*1 +1
plot(smallSpam$capitalAve,col=spamLabel)
library(devtools)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("RCharts")
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts")
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("ramnathv/rCharts")
library(rCharts)
library(datasets)
summary(airquality)
d <- data.frame(airquality, stringsAsFactors = FALSE)print(d)
head(airquality)
airquality
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(datasets)
summary(iris)
library(datasets)
d <- data("iris")
summary(d)
d <- data("iris")
data("iris")
d
data("iris")
setwd("~/Documents/Work/Data Science/Data Products/R_datasets/heart/heart_app")
shiny::runApp()
shiny::runApp()
runUrl( "https://knathan.shinyapps.io/heartapp/")
runUrl( "https://knathan.shinyapps.io/heartapp")
runUrl( "https://knathan.shinyapps.io")
runUrl( "https://knathan.shinyapps.io")
shinyapps::showLogs(account = "knathan",appName = "heartapp")
shiny::showLogs(account = "knathan",appName = "heartapp")
showLogs(account = "knathan",appName = "heartapp")
rsconnect::showLogs(streaming = TRUE)
rsconnect::showLogs(streaming = TRUE)
rsconnect::showLogs(streaming = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
rsconnect::showLogs(streaming = TRUE)
rsconnect::showLogs(streaming = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
outs()$out.finalModel
outs()
shiny::runApp()
shiny::runApp()
shiny::runApp()
heart <- read.csv("./heart.dat",header = FALSE,sep=" ")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
set.seed(1)
inTrain <- createDataPartition(y=heart$Class,p=0.7,list = FALSE)
training <- heart[inTrain,]
testing <- heart[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",number = 10, repeats = 10,allowParallel=T)
fit <- train(training$Class ~ ., method=input$model, trControl = fitControl,data=training[,input$checkGroup])
model_class <- predict(fit, newdata = testing)
model_cm <- confusionMatrix(model_class, testing$Class)
out.fit <- fit$finalModel
fit <- train(training$Class ~ ., method=input$model, trControl = fitControl,data=training)
fit <- train(training$Class ~ ., method="rf", trControl = fitControl,data=training)
fit$finalModel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?list()
shiny::runApp()
colnames(heart) <- c("Age","Sex","ChestPainType","RestBloodPressure","SerumCholestrol","FastingBloodSugar",
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/heart_app/helper.R')
)
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/heart_app/helper.R')
model <- "rf"
set.seed(1)
inTrain <- createDataPartition(y=heart$Class,p=0.7,list = FALSE)
training <- heart[inTrain,]
testing <- heart[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",number = 10, repeats = 10,allowParallel=T)
fit <- train(training$Class ~ ., method=model, trControl = fitControl,data=training[,checkGroup])
model_class <- predict(fit, newdata = testing)
model_cm <- confusionMatrix(model_class, testing$Class)
out.finalModel <- fit$finalModel
fit <- train(training$Class ~ ., method=model, trControl = fitControl,data=training)
out.finalModel <- fit$finalModel
out.finalModel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(gbm)
library(randomForest)
shiny::runApp()
shiny::runApp()
library(rpart)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fit <- train(training$Class ~ ., method=model, trControl = fitControl,data=training)
heart[,names] <- lapply(heart[,names], factor)
heart$Class <- factor(heart$Class, levels = c(1,2),labels = c("Absence", "Presence"))
heart$Slope <- ordered(heart$Slope)
set.seed(1)
inTrain <- createDataPartition(y=heart$Class,p=0.7,list = FALSE)
training <- heart[inTrain,]
testing <- heart[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",number = 10, repeats = 10,allowParallel=T)
heart <- read.csv("./heart.dat",header = FALSE,sep=" ")
colnames(heart) <- c("Age","Sex","ChestPainType","RestBloodPressure","SerumCholestrol","FastingBloodSugar",
"RestElectrocardiographic","MaxHeartRate",
"ExerciseInduced","Oldpeak","Slope","MajorVessels",
"Thal","Class")
names <- c("Sex","FastingBloodSugar","ExerciseInduced","RestElectrocardiographic","ChestPainType",
"Thal","Slope","Class")
heart[,names] <- lapply(heart[,names], factor)
heart$Class <- factor(heart$Class, levels = c(1,2),labels = c("Absence", "Presence"))
heart$Slope <- ordered(heart$Slope)
set.seed(1)
inTrain <- createDataPartition(y=heart$Class,p=0.7,list = FALSE)
training <- heart[inTrain,]
testing <- heart[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",number = 10, repeats = 10,allowParallel=T)
fit <- train(training$Class ~ ., method=model, trControl = fitControl,data=training)
model="rpart"
fit <- train(training$Class ~ ., method=model, trControl = fitControl,data=training)
model_class <- predict(fit, newdata = testing)
model_cm <- confusionMatrix(model_class, testing$Class)
predmodel <- prediction(model_class[,1], testing$Class)
predmodel <- prediction(model_class, testing$Class)
model_class
model_pred <- predict(fit, newdata = testing, type = "prob")
predmodel <- prediction(model_pred[,1], testing$Class)
perfmodel <- performance(predmodel, "tpr", "fpr")
plot(perfmodel)
source('density_plot.R')
# Below script is taken from
source('density_plot.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/density_plot.R')
density_plot(predmodel)
p <- density_plot(predmodel)
p
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
p <- density_plot(predmodel)
plot(p)
p
shiny::runApp()
plot()
shiny::runApp()
shiny::runApp()
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
neg_dens
pos_dens
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/rocr_helper.R')
plot(perfmodel,lwd=3,avg="vertical",spread.estimate="boxplot",add=TRUE)
plot(perfmodel,lwd=3,avg="vertical",spread.estimate="boxplot",add=TRUE)
plot(perfmodel,lwd=3,avg="vertical",spread.estimate="boxplot",add=TRUE)
perfmodel
plot(perfmodel,lwd=3,avg="vertical",spread.estimate="boxplot",add=TRUE)
plot(perfmodel,lwd=3,avg="vertical")
source('~/Documents/Work/Data Science/Data Products/R_datasets/heart/classifier_models.R')
neg_dens
plot(0,0,type="n", xlim= c(0,1), ylim=c(0,top),
xlab="Cutoff", ylab="Density",
main="Density plot for predicted classifiers", cex=0.5)
polygon(neg_dens, col=neg_col, border="black")
polygon(neg_dens, col="red", border="black")
polygon(neg_dens, col="red", border="black")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
